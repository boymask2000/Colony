package com.colony.buildings;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.badlogic.gdx.scenes.scene2d.Stage;
import com.colony.BaseActor;
import com.colony.Carrier;
import com.colony.commons.GiacenzaEdificio;
import com.colony.commons.MaterialeNecessario;
import com.colony.commons.OrdersHub;
import com.colony.commons.Ordine;
import com.colony.enums.Materiale;
import com.colony.enums.TipoEdificio;

public class Edificio {

	private static int ID = 0;

	private int id;
	protected TipoEdificio tipoEdificio;

	protected Materiale prodotto;
	private int numArticoliProdotti = 0;
	private int maxGiacenza = 10;

	private int timeToProduce = 1;
	private long lastTimeProduced = 0;

	protected List<MaterialeNecessario> materiePrimeNecessarie;
	protected GiacenzaEdificio materiPrimeInGiacenza;
	protected List<Materiale> materiePrimeOrdinate;

	private float x;
	private float y;

	private Stage mainStage;

	

	private BaseActor actor;

	public Edificio(float x, float y, Stage s, BaseActor act) {
		ID++;
		id = ID;
		this.mainStage = s;
		this.actor=act;

		this.x = x;
		this.y = y;

		materiPrimeInGiacenza = new GiacenzaEdificio();
	}

	public void work() {
		System.out.println("NumArticoli: " + numArticoliProdotti);

		Date d = new Date();
		if (d.getTime() - lastTimeProduced < timeToProduce * 1000)
			return;

		if (numArticoliProdotti >= maxGiacenza) {

			Ordine o = new Ordine(Castello.CASTELLO.getId(), prodotto);
			inviaProdottoToCastello(o);
			return;
		}

		List<MaterialeNecessario> daOrdinare = getMaterialeMancante();

		if (daOrdinare.size() == 0) {
			produci();
			lastTimeProduced = (new Date()).getTime();

		} else {
			ordinaMateriale(daOrdinare);
		}

		processOrders();

	}

	protected void processOrders() {
		if (numArticoliProdotti == 0)
			return;

		Ordine o = OrdersHub.getOrdine(prodotto);
		if (o == null)
			return;

		inviaProdotto(o);

	}

	protected void inviaProdotto(Ordine o) {
		numArticoliProdotti--;
		Carrier r = new Carrier(x, y, mainStage);

		r.setVelocityVec(10, 10);
	}

	protected void inviaProdottoToCastello(Ordine o) {
		
		Edificio castello = BuildingsHub.getNearestEdificio(TipoEdificio.CASTELLO, x, y);
		if( castello ==null)return;
		
		numArticoliProdotti--;
		Carrier r = new Carrier(x, y, mainStage);
		r.setOrdine(o);
		r.setTarget(castello);
		r.setSpeed(10);
	

		float deltax = castello.getX() - x;
		float deltay = castello.getY() - y;

		r.setVelocityVec(deltax, deltay);

	}

	public void setX(float x) {
		this.x = x;
	}

	public void setY(float y) {
		this.y = y;
	}

	private void produci() {
		if (materiePrimeNecessarie != null)
			for (MaterialeNecessario m : materiePrimeNecessarie) {
				materiPrimeInGiacenza.removeMateriale(m.getMateriale(), m.getNum());

			}
		numArticoliProdotti++;

	}

	private void ordinaMateriale(List<MaterialeNecessario> daOrdinare) {

		for (MaterialeNecessario m : daOrdinare) {
			if (materiePrimeOrdinate.contains(m.getMateriale()))
				continue;

			materiePrimeOrdinate.add(m.getMateriale());
			creaOrdine(m.getMateriale());
		}

	}

	private void creaOrdine(Materiale m) {
		Ordine o = new Ordine(id, m);
		OrdersHub.addOrder(o);

	}

	private List<MaterialeNecessario> getMaterialeMancante() {
		List<MaterialeNecessario> out = new ArrayList<MaterialeNecessario>();

		if (materiePrimeNecessarie == null)
			return out;

		for (MaterialeNecessario m : materiePrimeNecessarie) {
			int diff = m.getNum() - materiPrimeInGiacenza.getGiacenzaMateriale(m.getMateriale());

			if (diff > 0) {

				MaterialeNecessario mm = new MaterialeNecessario(m.getMateriale(), diff);

				out.add(mm);
			}

		}

		return out;
	}

	public TipoEdificio getTipoEdificio() {
		return tipoEdificio;
	}

	public float getX() {
		return x;
	}

	public float getY() {
		return y;
	}

	public int getId() {
		return id;
	}
	public BaseActor getActor() {
		return actor;
	}

	public void handleDelivery(Ordine ordine) {
		System.out.println("Attivato "+ordine.getMateriale());
		
	}
}
