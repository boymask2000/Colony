package com.colony.buildings.actors.infopanels;

import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.InputProcessor;
import com.badlogic.gdx.Screen;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.scenes.scene2d.Event;
import com.badlogic.gdx.scenes.scene2d.InputEvent;
import com.badlogic.gdx.scenes.scene2d.InputEvent.Type;
import com.badlogic.gdx.scenes.scene2d.Stage;
import com.badlogic.gdx.scenes.scene2d.ui.Button;
import com.badlogic.gdx.scenes.scene2d.ui.Label;
import com.badlogic.gdx.scenes.scene2d.ui.Button.ButtonStyle;
import com.badlogic.gdx.scenes.scene2d.ui.Label.LabelStyle;
import com.badlogic.gdx.scenes.scene2d.ui.Table;
import com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable;
import com.colony.buildings.abst.Edificio;
import com.colony.buildings.abst.EdificioFabbrica;
import com.colony.commons.GiacenzaEdificio;
import com.colony.enums.Materiale;
import com.colony.enums.StatoElemento;

public class InfoPanelScreen implements Screen, InputProcessor {

	private Stage mainStage;
	protected Stage uiStage;
	protected Table uiTable;
	protected Edificio edificio;

	public InfoPanelScreen(Stage mainStage, Edificio edificio) {
		this.mainStage = mainStage;
		this.edificio = edificio;

		uiStage = new Stage();
		uiTable = new Table();
		uiTable.setSize(400, 800);
		BackgroundColor backgroundColor = new BackgroundColor("b2.png");
		backgroundColor.setColor(2, 179, 228, 255); // r, g, b, a
		uiTable.setBackground(backgroundColor);
		
		
		uiTable.setFillParent(true);
		uiStage.addActor(uiTable);

		mainStage.addActor(uiTable);

	}

	protected void addOk() {
		uiTable.add().top();
		Button ok = createButton("ok.png");
		ok.addListener((Event e) -> {
			if (!(e instanceof InputEvent) || !((InputEvent) e).getType().equals(Type.touchDown))
				return false;
			uiTable.remove();

			return false;
		});
		uiTable.row();
		uiTable.add().bottom();
		uiTable.add(ok);
		Button stop = createButton("stop.png");
		stop.addListener((Event e) -> {
			if (!(e instanceof InputEvent) || !((InputEvent) e).getType().equals(Type.touchDown))
				return false;
			edificio.getActor().setStatoElemento(StatoElemento.STOPPED);
			uiTable.remove();
			return false;
		});
		uiTable.row();
		uiTable.add().bottom();
		uiTable.add(stop);
		Button start = createButton("start.png");
		start.addListener((Event e) -> {
			if (!(e instanceof InputEvent) || !((InputEvent) e).getType().equals(Type.touchDown))
				return false;
			edificio.getActor().setStatoElemento(StatoElemento.WORKING);
			uiTable.remove();
			return false;
		});
		uiTable.row();
		uiTable.add().bottom();
		uiTable.add(start);
	}

	@Override
	public void render(float dt) {

		uiStage.act(dt);
		mainStage.act(dt);

		mainStage.draw();
		uiStage.draw();
	}

	public void showInfo() {
		LabelStyle labelStyle = new LabelStyle();
		labelStyle.font = new BitmapFont();
		String name = edificio.getName();

		Label nameLabel = new Label(name, labelStyle);
		nameLabel.setColor(Color.CYAN);

		uiTable.row();
		uiTable.add().top();
		uiTable.add(nameLabel);

		if (edificio instanceof EdificioFabbrica) {
			EdificioFabbrica fab = (EdificioFabbrica) edificio;
			if (fab.getProdotto() != null)
				add(fab.getProdotto() + ": " + fab.getNumArticoliProdotti());

			GiacenzaEdificio giac = fab.getMateriPrimeInGiacenza();
			Map<Materiale, Integer> mat = giac.getAll();
			Iterator<Entry<Materiale, Integer>> iter = mat.entrySet().iterator();
			while (iter.hasNext()) {
				Entry<Materiale, Integer> ent = iter.next();

				add(ent.getKey() + " " + ent.getValue());

			}
		}

	}

	private void add(String s) {
		LabelStyle labelStyle = new LabelStyle();
		labelStyle.font = new BitmapFont();
		Label starfishLabel = new Label(s, labelStyle);
		starfishLabel.setColor(Color.CYAN);

		uiTable.row();
		uiTable.add().top();
		uiTable.add(starfishLabel);
	}

	private Button createButton(String img) {
		ButtonStyle buttonStyle = new ButtonStyle();
		Texture buttonTex = new Texture(Gdx.files.internal(img));
		TextureRegion buttonRegion = new TextureRegion(buttonTex);
		buttonStyle.up = new TextureRegionDrawable(buttonRegion);
		Button b = new Button(buttonStyle);
		b.setColor(Color.CYAN);
		return b;
	}

	@Override
	public boolean keyDown(int keycode) {

		return false;
	}

	@Override
	public boolean keyUp(int keycode) {

		return false;
	}

	@Override
	public boolean keyTyped(char character) {

		return false;
	}

	@Override
	public boolean touchDown(int screenX, int screenY, int pointer, int button) {

		return false;
	}

	@Override
	public boolean touchUp(int screenX, int screenY, int pointer, int button) {

		return false;
	}

	@Override
	public boolean touchDragged(int screenX, int screenY, int pointer) {

		return false;
	}

	@Override
	public boolean mouseMoved(int screenX, int screenY) {

		return false;
	}

	@Override
	public boolean scrolled(int amount) {

		return false;
	}

	@Override
	public void show() {
	}

	@Override
	public void resize(int width, int height) {

	}

	@Override
	public void pause() {

	}

	@Override
	public void resume() {

	}

	@Override
	public void hide() {

	}

	@Override
	public void dispose() {

	}

}
