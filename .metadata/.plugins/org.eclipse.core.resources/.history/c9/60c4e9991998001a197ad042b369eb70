package com.colony.commons;

import com.badlogic.gdx.ai.pfa.Connection;
import com.badlogic.gdx.graphics.g2d.Batch;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.scenes.scene2d.Stage;
import com.colony.BaseActor;
import com.colony.enums.TipoElemento;

public class TrattoStrada extends BaseActor implements Connection<Milestone> {

	private Vector2 start = new Vector2();
	private Vector2 end = new Vector2();
	private Stage stage;
	private Milestone milestoneStart;

	private Milestone milestoneEnd;

//	public TrattoStrada(float x, float y, Stage s) {
//		super(x, y, s, TipoElemento.ROAD);
//		start.x = x;
//		start.y = y;
//		this.stage = s;
//	}

	public TrattoStrada(Milestone mx, Milestone my, Stage s) {
		super(mx.getX(), mx.getY(), s, TipoElemento.ROAD);
		this.stage = s;
		milestoneStart = mx;
		milestoneEnd = my;
		start.x = mx.getX();
		start.y = mx.getY();
		end.x = my.getX();
		end.y = my.getY();

		milestoneStart.addTrattoOUT(this);
		milestoneEnd.addTrattoIN(this);

	}

	public TrattoStrada(Milestone mx, Stage s) {
		super(mx.getX(), mx.getY(), s, TipoElemento.ROAD);
		this.stage = s;
		milestoneStart = mx;

		start.x = mx.getX();
		start.y = mx.getY();

		milestoneStart.addTrattoOUT(this);

	}

	// ***********************************************************************************

	public int getLength() {
		return (int) Utils.calcDist(start.x, start.y, end.x, end.y);
	}

	public Stage getStage() {
		return stage;
	}

	public void setStage(Stage stage) {
		this.stage = stage;
	}

	public Vector2 getStart() {
		return start;
	}

	



	public Vector2 getEnd() {
		return end;
	}



	@Override
	public void draw(Batch batch, float parentAlpha) {
		super.draw(batch, parentAlpha);
		if( milestoneStart==null || milestoneEnd==null)return;
		
		float x1 = milestoneStart.getX();
		float y1 = milestoneStart.getY();
		float x2 = milestoneEnd.getX();
		float y2 = milestoneEnd.getY();

		ShapeRenderer shapeRenderer = new ShapeRenderer();
		shapeRenderer.begin(ShapeRenderer.ShapeType.Filled);
		shapeRenderer.setColor(100, 255, 0, 1);
		shapeRenderer.rectLine(x1,y1,x2,y2, 4);
		shapeRenderer.end();

		// System.out.println(start.x + " " + start.y + " " + end.x + " " + end.y);
	}

	@Override
	public void loadAnimWorking() {
		// TODO Auto-generated method stub

	}

	public void setMilestoneStart(Milestone m) {
		milestoneStart = m;

	}

	public void setMilestoneEnd(Milestone m) {
		milestoneEnd = m;

	}

	@Override
	public float getCost() {
		return Vector2.dst(start.x, start.y, end.x, end.y);
	}

	@Override
	public Milestone getFromNode() {
		return milestoneStart;
	}

	@Override
	public Milestone getToNode() {
		return milestoneEnd;
	}

	public Milestone getMilestoneStart() {
		return milestoneStart;
	}

	public Milestone getMilestoneEnd() {
		return milestoneEnd;
	}

	public void dump() {
		System.out.println(milestoneStart.toString() + " -> " + milestoneEnd.toString());

	}

}
