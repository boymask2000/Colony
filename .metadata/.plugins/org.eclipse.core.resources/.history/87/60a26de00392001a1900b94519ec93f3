package com.colony.buildings;

import java.util.Date;

import com.badlogic.gdx.scenes.scene2d.Stage;
import com.colony.BaseActor;
import com.colony.buildings.actors.Agent;
import com.colony.buildings.actors.Mission;
import com.colony.buildings.actors.PozzoActor;
import com.colony.commons.Anagrafica;
import com.colony.enums.TipoElemento;
import com.colony.fixed.Albero;

public class CollectorSuArea extends EdificioSuArea {
	private int timeToWork = 15;
	private long lastTimeWorked = 0;
	private boolean missionComplete = true;
	protected float sizeArea = 300;
	private TipoElemento targetType;

	public CollectorSuArea(float x, float y, Stage s, BaseActor act) {
		super(x, y, s, act);

	}

	public void notifyMissionComplete() {
		missionComplete = true;
		lastTimeWorked = (new Date()).getTime();
	}

	@Override
	public void work() {
		super.super.work();
		if (!missionComplete)
			return;

		Date d = new Date();

		if (d.getTime() - lastTimeWorked < timeToWork * 1000)
			return;

		Agent a = new Agent(getX(), getY(), mainStage, this);

		BaseActor target = Anagrafica.getNearestActor(targetType, getX(), getY());
		if (target == null)
			return;

		missionComplete = false;
		a.goMission(target.getX(), target.getY(), new Mission() {

			@Override
			public void exec() {
				target.remove();
				Anagrafica.removeActor(target);
				numArticoliProdotti++;
				System.out.println(prodotto +" "+numArticoliProdotti);
			}
		});

	}

	public TipoElemento getTargetType() {
		return targetType;
	}

	public void setTargetType(TipoElemento targetType) {
		this.targetType = targetType;
	}
}
