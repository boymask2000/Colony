package com.colony.buildings;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.badlogic.gdx.scenes.scene2d.Stage;
import com.colony.BaseActor;
import com.colony.Carrier;
import com.colony.commons.Anagrafica;
import com.colony.commons.GiacenzaEdificio;
import com.colony.commons.MaterialeNecessario;
import com.colony.commons.OrdersHub;
import com.colony.commons.Ordine;
import com.colony.enums.Materiale;
import com.colony.enums.TipoElemento;

public class EdificioFabbrica extends Edificio {
	protected Materiale prodotto;
	
	
	protected int numArticoliProdotti = 0;
	

	private int maxGiacenza = 3;

	private int timeToProduce = 1;
	private long lastTimeProduced = 0;

	protected List<MaterialeNecessario> materiePrimeNecessarie=new ArrayList<MaterialeNecessario>();
	protected GiacenzaEdificio materiPrimeInGiacenza;
	

	protected List<Materiale> materiePrimeOrdinate=new ArrayList<Materiale>();

	public EdificioFabbrica(float x, float y, Stage s, BaseActor act, String name) {
		super(x, y, s, act,name);

		materiPrimeInGiacenza = new GiacenzaEdificio();
	}

	@Override
	public void work() {
	

		Date d = new Date();
		if (d.getTime() - lastTimeProduced < timeToProduce * 1000)
			return;

	

		List<MaterialeNecessario> daOrdinare = getMaterialeMancante();

		if (daOrdinare.size() == 0) {
			produci();
			lastTimeProduced = (new Date()).getTime();

		} else {
			ordinaMateriale(daOrdinare);
		}

		processOrders();

	}

	protected void processOrders() {
		if (numArticoliProdotti == 0)
			return;

		Ordine o = OrdersHub.getOrdine(prodotto);
		if (o != null)
			inviaProdotto(o);

		
		if (numArticoliProdotti >= maxGiacenza) {

			Ordine oo = new Ordine(0, prodotto);
			inviaProdottoToCastello(oo);
			return;
		}

	}
	public GiacenzaEdificio getMateriPrimeInGiacenza() {
		return materiPrimeInGiacenza;
	}
	protected void inviaProdotto(Ordine o) {
		numArticoliProdotti--;
		Carrier r = new Carrier(x, y, o,mainStage);
		
		Edificio target = Anagrafica.getActorById(o.getIdEdificio());
		r.setTarget(target);
	

		float deltax = target.getX() - x;
		float deltay = target.getY() - y;

		r.setVelocityVec(deltax, deltay);
	}

	protected void inviaProdottoToCastello(Ordine o) {

		 BaseActor act = Anagrafica.getNearestActor(TipoElemento.CASTELLO, x, y);
		if (act == null)
			return;
		Edificio castello=act.getEdificio();

		numArticoliProdotti--;
		Carrier r = new Carrier(x, y,o, mainStage);
	//	r.setOrdine(o);
		r.setTarget(castello);
		//r.setSpeed(10);

		float deltax = castello.getX() - x;
		float deltay = castello.getY() - y;

		r.setVelocityVec(deltax, deltay);

	}
	

	private void produci() {
		if (materiePrimeNecessarie != null)
			for (MaterialeNecessario m : materiePrimeNecessarie) {
				materiPrimeInGiacenza.removeMateriale(m.getMateriale(), m.getNum());

			}
		numArticoliProdotti++;

	}

	private void ordinaMateriale(List<MaterialeNecessario> daOrdinare) {

		for (MaterialeNecessario m : daOrdinare) {
			if (materiePrimeOrdinate.contains(m.getMateriale()))
				continue;

			materiePrimeOrdinate.add(m.getMateriale());
			creaOrdine(m.getMateriale());
		}

	}

	private void creaOrdine(Materiale m) {
		Ordine o = new Ordine(id, m);
		OrdersHub.addOrder(o);

	}

	private List<MaterialeNecessario> getMaterialeMancante() {
		List<MaterialeNecessario> out = new ArrayList<MaterialeNecessario>();

		if (materiePrimeNecessarie == null)
			return out;

		for (MaterialeNecessario m : materiePrimeNecessarie) {
			int diff = m.getNum() - materiPrimeInGiacenza.getGiacenzaMateriale(m.getMateriale());

			if (diff > 0) {

				MaterialeNecessario mm = new MaterialeNecessario(m.getMateriale(), diff);

				out.add(mm);
			}

		}

		return out;
	}
	public Materiale getProdotto() {
		return prodotto;
	}
	public int getNumArticoliProdotti() {
		return numArticoliProdotti;
	}
	public void handleDelivery(Ordine ordine) {
		System.out.println("Attivato " + ordine.getMateriale());
		materiPrimeInGiacenza.addMateriale(ordine.getMateriale());
		materiePrimeOrdinate.remove(ordine.getMateriale());
		materiPrimeInGiacenza.dump();

	}
}
