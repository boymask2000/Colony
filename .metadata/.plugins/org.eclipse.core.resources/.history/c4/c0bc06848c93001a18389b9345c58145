package com.colony.buildings;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.scenes.scene2d.Stage;
import com.badlogic.gdx.utils.Array;
import com.colony.BaseActor;
import com.colony.buildings.actors.Agent;
import com.colony.buildings.actors.Mission;
import com.colony.buildings.actors.PozzoActor;
import com.colony.commons.Anagrafica;
import com.colony.commons.NotifyFromAgent;
import com.colony.commons.Terreno;
import com.colony.fixed.Albero;

public abstract class Coltivatore extends EdificioFabbrica implements NotifyFromAgent {
	private int timeToWork = 15;
	private long lastTimeWorked = 0;
	private boolean missionComplete = true;
	protected float sizeArea = 50;
	protected float elementoMargin = 10;//Terreno.MARGIN;

	public Coltivatore(float x, float y, Stage s, BaseActor act, String name) {
		super(x, y, s, act, name);
init();
	}

	public void notifyMissionComplete() {
		missionComplete = true;
		lastTimeWorked = (new Date()).getTime();
	}

	List<Vector2> lVector = new ArrayList<>();

	private void init() {
		float startX = getX() + 50;
		float startY = getY() + 50;
		for (float xx = startX; xx < startX + sizeArea; xx += elementoMargin)
			for (float yy = startY; yy < startY + sizeArea; yy += elementoMargin) {
				lVector.add(new Vector2(xx, yy));
			}
	}

	int index = 0;

	@Override
	public void work() {
		if (!missionComplete)
			return;

		Date d = new Date();

		if (d.getTime() - lastTimeWorked < timeToWork * 1000)
			return;

		if (index > lVector.size())
			return;

		Vector2 v = lVector.get(index);index++;

		Agent a = new Agent(getX(), getY(), mainStage, this);
		missionComplete = false;
		a.goMission(v.x, v.y, new Mission() {

			@Override
			public void exec() {
				createItem(v.x, v.y);

			}
		});

	}

	public void work2() {
		if (!missionComplete)
			return;

		Date d = new Date();

		if (d.getTime() - lastTimeWorked < timeToWork * 1000)
			return;

		float startX = getX() + 50;
		float startY = getY() + 50;

		float posX = (float) (startX + 2 * sizeArea * (Math.random() - 0.5));
		float posY = (float) (startY + 2 * sizeArea * (Math.random() - 0.5));
		if (!Terreno.isFree(posX, posY))
			return;
		Vector2 v = Terreno.normalize(posX, posY);
		final float pX = v.x;
		final float pY = v.y;

		Terreno.alloc(posX, posY);
		Agent a = new Agent(getX(), getY(), mainStage, this);
		missionComplete = false;
		a.goMission(pX, pY, new Mission() {

			@Override
			public void exec() {
				createItem(pX, pY);

			}
		});

	}

	protected abstract void createItem(float posX, float posY);

}
